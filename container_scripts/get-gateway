#!/bin/bash -l

# This script will
#
#  1. Clone the gateway repository into a mounted directory in the host.
#     The reason this is done in the container is because it is easier
#     to put the GitHub deployment tokens into the running container than to
#     create deployment tokens for each host machine.
#
#  2. Checkout the gateway version corresponding to the Docker image.

set -e
set -a

source /home/deploy/.bashrc

if [ ! -f /home/deploy/.ssh/id_rsa ];
then
  >&2 echo "ERROR: No ssh key found. Did you mount the repo's config/.ssh?"
  exit 1
fi

if [ -z "$GATEWAY_GIT_HASH" ];
then
  >&2 echo "ERROR: GATEWAY_GIT_HASH is a required ENV variable. Please set in the host's .env file"
  exit 1
fi

# Add GitHub to the known_hosts
#   SEE: https://serverfault.com/a/701637
GITHUB_PUBLIC_KEY="$( ssh-keyscan github.com 2>/dev/null )"
GITHUB_PUBLIC_KEY_FINGERPRINT="$( ssh-keygen -lf <( echo "$GITHUB_PUBLIC_KEY" ) )"
GITHUB_SSH_KEY_FINGERPRINT="$(
  node --eval '
    const { execSync } = require("child_process");

    const meta = JSON.parse(execSync("curl -s https://api.github.com/meta").toString());

    const {
      ssh_key_fingerprints: { SHA256_RSA },
    } = meta

    console.log(SHA256_RSA);
  '
)"

# Change to if key exists, delete it.
if grep -q "$GITHUB_SSH_KEY_FINGERPRINT" <<< "$GITHUB_PUBLIC_KEY_FINGERPRINT";
then
    # Overwrites the known_hosts file.
    echo "$GITHUB_PUBLIC_KEY" > /home/deploy/.ssh/known_hosts
else
  >&2 echo "ERROR: GitHub SSH validation fail."
  exit 1
fi

# Clone the gateway repo.
# Noninteractive because using deployment key rather than password.
git clone git@github.com:availabs/tigtest2.git gateway

cd /home/deploy/gateway/

# GATEWAY_GIT_HASH must be set in the .env file
git checkout "$GATEWAY_GIT_HASH"
