#!/bin/bash -l

# This script will
#
#  0. The Docker container must be created with --env-file config/.env
#
#  1. Configure the app.
#     Configuation will happen in the mounted ~/gateway/ directory

set -e
set -a

cd /home/deploy/gateway/

mkdir -p tmp/pids/
mkdir -p tmp/sockets/

SECRET="$( rake secret | tail -n1 )"

# The following are used to accomodate any characters in the passwords.
#   See: https://stackoverflow.com/a/29613573/3970755
quoteRe() { sed -e 's/[^^]/[&]/g; s/\^/\\^/g; $!a\'$'\n''\\n' <<<"$1" | tr -d '\n'; }

quoteSubst() {
  IFS= read -d '' -r < <(sed -e ':a' -e '$!{N;ba' -e '}' -e 's/[&/\]/\\&/g; s/\n/\\&/g' <<<"$1")
  printf %s "${REPLY%$'\n'}"
}

# If the application.yml file does not already exist, configure it using ENV variables.
if [ ! -f /config/application.yml ];
then
  cp config/application.yml.template config/application.yml

  # PostgreSQL credentials must be in the .env file
  sed -i "
    s/^SECRET_KEY_BASE:.*/SECRET_KEY_BASE: \"${SECRET}\"/;
    s/DB_SCHEMA:.*/DB_SCHEMA: ${PGDATABASE}/;
    s/DB_USER_NAME:.*/DB_USER_NAME: ${PGUSER}/;
    s/DB_HOST:.*/DB_HOST: $( quoteSubst "${PGHOST}" )/;
    s/DB_PASSWORD:.*/DB_PASSWORD: $( quoteSubst "${PGPASSWORD}" )/; \
    s/DB_PORT:.*/DB_PORT: ${PGPORT}/;
    s/DB_POOL_SIZE:.*/DB_POOL_SIZE: ${DB_POOL_SIZE}/;" \
    config/application.yml

  # The following config ENV variables are optional.
  if [[ ! -z "$GATEWAY_ADMIN_EMAIL" ]];
  then
    sed -i \
      "s/^ADMIN_EMAIL.*/ADMIN_EMAIL: $( quoteSubst "${GATEWAY_ADMIN_EMAIL}" )/" \
      config/application.yml
  fi

  if [[ ! -z "$GATEWAY_ADMIN_NAME" ]];
  then
    sed -i \
      "s/^ADMIN_NAME.*/ADMIN_NAME: ${GATEWAY_ADMIN_NAME}"/ \
      config/application.yml
  fi

  if [[ ! -z "$GATEWAY_ADMIN_PASSWORD" ]];
  then
    # Allow any printable characters in the GATEWAY_ADMIN_PASSWORD.
    #   See: https://stackoverflow.com/a/4844945/3970755
    sed -i \
      "s/^ADMIN_PASSWORD.*/ADMIN_PASSWORD: $( quoteSubst "${GATEWAY_ADMIN_PASSWORD}" )/" \
      config/application.yml
  fi

  if [[ ! -z "$GATEWAY_APP_NAME" ]];
  then
    sed -i \
      "s/^APP_NAME.*/APP_NAME: $( quoteSubst "${GATEWAY_APP_NAME}" )/" \
      config/application.yml
  fi

  if [[ ! -z "$GATEWAY_DISABLE_IP_SPOOFING_CHECK" ]];
  then
    sed -i \
      "s/^DISABLE_IP_SPOOFING_CHECK.*/DISABLE_IP_SPOOFING_CHECK: ${GATEWAY_DISABLE_IP_SPOOFING_CHECK}/" \
      config/application.yml
  fi

  if [[ ! -z "$GATEWAY_GATEWAY_VERSION" ]];
  then
    sed -i \
      "s/^GATEWAY_VERSION.*/GATEWAY_VERSION: ${GATEWAY_GATEWAY_VERSION}/" \
      config/application.yml
  fi

  if [[ ! -z "$GATEWAY_HOST" ]];
  then
    sed -i \
      "s/^HOST.*/HOST: ${GATEWAY_HOST}/" \
      config/application.yml
  fi

  if [[ ! -z "$GATEWAY_LOG_LEVEL" ]];
  then
    sed -i \
      "s/^LOG_LEVEL.*/LOG_LEVEL: ${GATEWAY_LOG_LEVEL}/" \
      config/application.yml
  fi

  if [[ ! -z "$GATEWAY_MAX_THREADS" ]];
  then
    sed -i \
      "s/^MAX_THREADS.*/MAX_THREADS: ${GATEWAY_MAX_THREADS}/" \
      config/application.yml
  fi

  if [[ ! -z "$GATEWAY_MIN_THREADS" ]];
  then
    sed -i \
      "s/^MIN_THREADS.*/MIN_THREADS: ${GATEWAY_MIN_THREADS}/" \
      config/application.yml
  fi

  if [[ ! -z "$GATEWAY_PUMA_WORKERS" ]];
  then
    sed -i \
      "s/^PUMA_WORKERS.*/PUMA_WORKERS: ${GATEWAY_PUMA_WORKERS}/" \
      config/application.yml
  fi

  if [[ ! -z "$GATEWAY_RESTART_THRESHOLD" ]];
  then
    sed -i \
      "s/^RESTART_THRESHOLD.*/RESTART_THRESHOLD: ${GATEWAY_RESTART_THRESHOLD}/" \
      config/application.yml
  fi

  if [[ ! -z "$GATEWAY_ROLES" ]];
  then
    sed -i \
      "s/^ROLES.*/ROLES: ${GATEWAY_ROLES}/" \
      config/application.yml
  fi

fi

rake assets:precompile

bundle exec puma -C config/puma.rb
